<?php
/**
* @file
* Implement CiviCRM entities as a Drupal Entity
*
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2012
 * $Id$
 *
 */

/*
 * Implemenation of hook_enable()
 */
function civicrm_entity_enable() {
  db_query("UPDATE {system} SET weight = 110 WHERE name = 'civicrm_entity'");
}
/*
 * Here we declare Selected CiviCRM entities to Drupal
 */
function civicrm_entity_entity_info_alter(&$info) {
  $entities = _civicrm_entity_enabled_entities();
  foreach ($entities as $drupal_entity => $civicrm_entity) {
    $info[$drupal_entity] = array(
      'description' => $civicrm_entity,
      'optional' => TRUE,
      'label' => "CiviCRM $drupal_entity",
      'controller class' => 'civicrmEntityController',
      'fieldable' => FALSE,
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE
        )
      ),
      'entity keys' => array(
        'id' => 'id',
        'name' => 'ID'
      )
    )
    ;
  }
  $info['civicrm_entity'] = array(
    'description' => 'CiviCRM Entity',
    'optional' => TRUE,
    'label' => "CiviCRM Entity",
    'controller class' => 'civicrmEntityController',
    'fieldable' => FALSE,
    'bundles' => array(
      'randomField' => array(
        'properties' => array(
          'label' => 'field',
          'type' => 'text',
          'description' => 'desc'
        )
      )
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Default'),
        'custom settings' => FALSE
      )
    ),
    'entity keys' => array(
      'id' => 'id',
      'name' => 'ID'
    )
  );
  return;
}

/*
 * Here we declare Selected CiviCRM entities to Drupal
 */
function civicrm_entity_entity_property_info() {
  if (! civicrm_initialize(TRUE)) {
    return;
  }

  // we'll start with a few basic entities but we could get them the same way the API explorer does
  $entities = _civicrm_entity_enabled_entities();
  $info = array();
  foreach ($entities as $drupal_entity => $civicrm_entity) {
    $info[$drupal_entity]['properties'] = _civicrm_entity_getproperties($civicrm_entity, 'property_info');
    $info[$drupal_entity]['bundles'] = array();
  }
  // this makes the drupal user available when chaining from a rule
  $info['civicrm_contact']['properties']['civicrm_user'] = array(
    'label' => 'Drupal User',
    'description' => 'Drupal User for contact',
    'type' => 'user'
  );
  return $info;
}
function _civicrm_entity_enabled_entities() {
  return array(
    'civicrm_event' => 'event',
    'civicrm_contact' => 'contact',
    'civicrm_participant' => 'participant',
    'civicrm_relationship' => 'relationship'
  );
}

/*
 * We reformat the enabled entities for the data info which is looking for
 *   array('Event' => 'civicrm_event');
 */

/*
 * Calculate fields for entities
*/

function _civicrm_entity_getproperties($civicrm_entity, $context = '') {
  $info = array();
  if ($civicrm_entity == 'contact') {
    $info['civi_user'] = array(
      'label' => 'Drupal User',
      'type' => 'user'
    );
  }
  $fields = civicrm_api($civicrm_entity, 'getfields', array(
    'version' => 3,
    'action' => 'create'
  ));
  foreach ($fields['values'] as $fieldname => $field_specs) {
    //type is empty for custom fields - we should sort that out but skipping for now
    // we are only doing 'integers' at this stage
    $types = array(
      1 => 'integer',
      2 => 'text',
      32 => 'text'
    );
    if (! empty($field_specs['type']) && array_key_exists($field_specs['type'], $types)) {
      $info[$fieldname] = array(
        'label' => $field_specs['title'],
        'type' => $types[$field_specs['type']],
        'sanitize' => 'check_plain'
      );

      if (CRM_Utils_Array::value('FKClassName', $field_specs) == 'CRM_Contact_DAO_Contact') {
        $info[$fieldname . '_contact'] = array(
          'label' => $field_specs['title'],
          'type' => 'civicrm_contact',
          'property_info' => array(
            'field' => $fieldname,
            'entity' => 'contact'
          ),
          'getter callback' => 'civicrm_entity_metadata_civicrm_entity_get_properties'
        );
      }

      if (! empty($field_specs['options'])) {
        //  $info[$fieldname]['type'] = 'list<integer>';
        $info[$fieldname]['options list'] = '_civicrm_entity_rules_attach_options';
        $info[$fieldname]['options data'] = $field_specs['options'];
        if ($context == 'property_info') {
          $info[$fieldname]['property defaults']['options list'] = $field_specs['options'];
        }
      }
    }
  }
  return $info;
}
function civicrm_entity_($entity) {
  return array(
    'path' => 'civicrm-entity/' . $entity->id
  );
}

/*
 * Implement getter callback -
 *
 * NB this is in a separate file called callbacks.inc in entity module - I
 * couldn't see how it was loaded so maybe the name has some magic?
 */
function civicrm_entity_metadata_civicrm_entity_get_properties($data, $options, $name, $type, $info) {
  $contact = civicrm_api($info['property_info']['entity'], 'get', array(
    'version' => 3,
    'id' => $data->$info['property_info']['field'],
    'sequential' => 1
  ));
  return (object) $contact['values'][0];
}

/**
 * Implement the post hook and fire the corresponding rules event
 */
function civicrm_entity_civicrm_post($op, $object_name, $object_id, &$object_ref) {
  if (! module_exists('rules')) {
    return;
  }

  if (in_array($object_name, array(
    'Individual',
    'Household',
    'Organization'
  ))) {
    $object_name = 'Contact';
  }

  $valid_objects = _civicrm_entity_enabled_entities();
  if (! in_array(strtolower($object_name), $valid_objects, TRUE)) {
    return;
  }

  $event_name = NULL;
  switch ($op) {
    case 'create':
    case 'edit':
    case 'delete':
      $event_name = 'civicrm_' . strtolower($object_name) . "_{$op}";
      break;

    default:
      break;
  }

  if ($event_name) {
    rules_invoke_event($event_name, $object_ref);
  }
}
class civicrmEntity extends Entity {
  protected function defaultLabel() {
    return $this->title;
  }
  protected function defaultUri() {
    return array(
      'path' => 'task/' . $this->identifier()
    );
  }
}
class civicrmEntityController extends EntityAPIController {


  /**
   * Implements EntityAPIControllerInterface.
   *
   * @param $transaction
   *   Optionally a DatabaseTransaction object to use. Allows overrides to pass
   *   in their transaction object.
   */
  public function save($entity, DatabaseTransaction $transaction = NULL) {
    print_r($entity);
    print_r($transaction);
    print_r($this);
    $params = (array) $entity;
    unset($params['is_new']);
    $params['version'] = 3;
    $params['sequential'] = 1;

    try {
      $entity->is_new = ! empty($entity->is_new) || empty($entity->{$this->idKey});
      //@todo should we call this hook when drupal saves (as opposed to Civi?) ditto insert, update
      $this->invoke('presave', $entity);
      if ($entity->is_new) {
        $result = civicrm_api(substr($this->entityType, 8), 'create', $params);
        //$this->invoke('insert', $entity); (see above)
      }
      else {
        $result = civicrm_api(substr($this->entityType, 8), 'update', $params);
        //$this->invoke('update', $entity); (see above)
      }

      unset($entity->is_new);
      unset($entity->is_new_revision);
      unset($entity->original);
      if (! civicrm_error($result)) {
        return (object) $result['values'][0];
      }
      throw new Exception($result['error_message']);
    } catch (Exception $e) {
      watchdog_exception($this->entityType, $e);
      throw $e;
    }
  }
}

